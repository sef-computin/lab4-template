// Code generated by MockGen. DO NOT EDIT.
// Source: dbhandler.go

// Package mock_dbhandler is a generated GoMock package.
package mock_dbhandler

import (
        models "lab2/src/bonus-service/models"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockBonusDB is a mock of BonusDB interface.
type MockBonusDB struct {
        ctrl     *gomock.Controller
        recorder *MockBonusDBMockRecorder
}

// MockBonusDBMockRecorder is the mock recorder for MockBonusDB.
type MockBonusDBMockRecorder struct {
        mock *MockBonusDB
}

// NewMockBonusDB creates a new mock instance.
func NewMockBonusDB(ctrl *gomock.Controller) *MockBonusDB {
        mock := &MockBonusDB{ctrl: ctrl}
        mock.recorder = &MockBonusDBMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBonusDB) EXPECT() *MockBonusDBMockRecorder {
        return m.recorder
}

// CreateHistoryRecord mocks base method.
func (m *MockBonusDB) CreateHistoryRecord(arg0 *models.PrivilegeHistory) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateHistoryRecord", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateHistoryRecord indicates an expected call of CreateHistoryRecord.
func (mr *MockBonusDBMockRecorder) CreateHistoryRecord(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHistoryRecord", reflect.TypeOf((*MockBonusDB)(nil).CreateHistoryRecord), arg0)
}

// CreatePrivilege mocks base method.
func (m *MockBonusDB) CreatePrivilege(arg0 *models.Privilege) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreatePrivilege", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreatePrivilege indicates an expected call of CreatePrivilege.
func (mr *MockBonusDBMockRecorder) CreatePrivilege(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivilege", reflect.TypeOf((*MockBonusDB)(nil).CreatePrivilege), arg0)
}

// GetHistoryById mocks base method.
func (m *MockBonusDB) GetHistoryById(ticketUID string) ([]*models.PrivilegeHistory, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetHistoryById", ticketUID)
        ret0, _ := ret[0].([]*models.PrivilegeHistory)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetHistoryById indicates an expected call of GetHistoryById.
func (mr *MockBonusDBMockRecorder) GetHistoryById(ticketUID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryById", reflect.TypeOf((*MockBonusDB)(nil).GetHistoryById), ticketUID)
}

// GetPrvilegeByUsername mocks base method.
func (m *MockBonusDB) GetPrvilegeByUsername(username string) (*models.Privilege, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetPrvilegeByUsername", username)
        ret0, _ := ret[0].(*models.Privilege)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetPrvilegeByUsername indicates an expected call of GetPrvilegeByUsername.
func (mr *MockBonusDBMockRecorder) GetPrvilegeByUsername(username interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrvilegeByUsername", reflect.TypeOf((*MockBonusDB)(nil).GetPrvilegeByUsername), username)
}

// UpdatePrivilege mocks base method.
func (m *MockBonusDB) UpdatePrivilege(arg0 *models.Privilege) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdatePrivilege", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdatePrivilege indicates an expected call of UpdatePrivilege.
func (mr *MockBonusDBMockRecorder) UpdatePrivilege(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivilege", reflect.TypeOf((*MockBonusDB)(nil).UpdatePrivilege), arg0)
}
